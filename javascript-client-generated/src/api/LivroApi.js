/**
 * Simple Inventory API
 * This is a simple API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: you@your-company.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.5
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Livro'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Livro'));
  } else {
    // Browser globals (root is window)
    if (!root.SimpleInventoryApi) {
      root.SimpleInventoryApi = {};
    }
    root.SimpleInventoryApi.LivroApi = factory(root.SimpleInventoryApi.ApiClient, root.SimpleInventoryApi.Livro);
  }
}(this, function(ApiClient, Livro) {
  'use strict';

  /**
   * Livro service.
   * @module api/LivroApi
   * @version 1.0.0
   */

  /**
   * Constructs a new LivroApi. 
   * @alias module:api/LivroApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createLivro operation.
     * @callback module:api/LivroApi~createLivroCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * add an livro
     * @param {module:model/Livro} body Created an livro
     * @param {module:api/LivroApi~createLivroCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createLivro = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createLivro");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/xml'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/livro/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLivroById operation.
     * @callback module:api/LivroApi~deleteLivroByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete livro by ID
     * Deleta o livro informado 
     * @param {Number} livroId ID of delete
     * @param {module:api/LivroApi~deleteLivroByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteLivroById = function(livroId, callback) {
      var postBody = null;

      // verify the required parameter 'livroId' is set
      if (livroId === undefined || livroId === null) {
        throw new Error("Missing the required parameter 'livroId' when calling deleteLivroById");
      }


      var pathParams = {
        'livroId': livroId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/livro/{livroId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLivroById operation.
     * @callback module:api/LivroApi~getLivroByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Livro} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * find livro by ID
     * Retorna um livro espec√≠fico 
     * @param {Number} livroId ID of livro to return
     * @param {module:api/LivroApi~getLivroByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Livro}
     */
    this.getLivroById = function(livroId, callback) {
      var postBody = null;

      // verify the required parameter 'livroId' is set
      if (livroId === undefined || livroId === null) {
        throw new Error("Missing the required parameter 'livroId' when calling getLivroById");
      }


      var pathParams = {
        'livroId': livroId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = Livro;

      return this.apiClient.callApi(
        '/livro/{livroId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchLivro operation.
     * @callback module:api/LivroApi~searchLivroCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * searches livro
     * Retorna todos os itens da livraria 
     * @param {module:api/LivroApi~searchLivroCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.searchLivro = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/livro/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
